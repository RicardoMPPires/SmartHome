@startuml

title Execute Command (Actuator) : Main Success Scenario
autonumber

participant ":Router" as R
participant ":ActuatorCTRLWeb" as ACW
participant ":ActuatorMapper" as AM
participant "actuatorIDVO:ActuatorIDVO" as AID
participant ":ActuatorService" as AS
participant ":ActuatorRepository" as AR
participant ":ActuatorAssembler" as AA
participant ":ActuatorFactory" as AF
participant "actuator:Actuator" as A
participant ":Driver" as D
participant "actuatorDataModel:ActuatorDataModel" as ADT
participant "simHardwareAct:ActuatorExternalService" as AES

[o-> R : PATCH /actuators/{actuatorId}/act?command=command
activate R

R -> ACW : executeCommand(actuatorId)
activate ACW

ACW -> AM : createActuatorIDVO(actuatorId)
activate AM

AM -> AID** : create(actuatorId)

AM --> ACW : **actuatorIDVO**
deactivate AM

ACW -> AS : executeCommand(actuatorIDVO,command)
activate AS

AS -> AR : isPresent(actuatorIDVO)
activate AR

AR --> AS : **true**
deactivate AR

AS -> AR : findById(actuatorIDVO)
activate AR

AR -> AR : **actuatorIDStr** = getActuatorIdAsString(actuatorIDVO)
activate AR
deactivate AR

AR -> D : READ(actuatorIDStr)
activate D

D ->o] : READ(actuatorIDStr)

D <--o] : **data**
D -> ADT** :

note left : Driver deserializes data into actuator data model.

D --> AR : **actuatorDataModel**
deactivate D

AR -> AA : toDomain(actuatorFactory, actuatorDataModel)
activate AA


AA -> AF : createActuator(actuatorDataModel)
activate AF

note right: Extracted attributes from actuator data model
AF -> A** : create(actuatorId,actuatorName,\nactuatorType,deviceId,settings)
AF--> AA : **actuator**
deactivate AF

AA --> AR : **actuator**
deactivate AA

AR --> AS : **actuator**
deactivate AR

AS -> AS : **simHardwareAct** = setActuatorExternalService()
AS -> A : executeCommand(simHardwareAct, **command**)
activate A

A -> A: validateCommand(**command**)
activate A
deactivate A

A -> AES : executeCommandSim(**command**)
activate AES

note right: Abstracted operations as they\n assume external communication
AES ->o] :

AES --> A : **true**
deactivate AES

note left: Command is the new intended status
A -> A : setNewStatus(**command**)
activate A
deactivate A

A --> AS : **true**
deactivate A

AS -> AR : save(**actuator**)
note left: Abstracted communication with database driver, conversion to \ndata model and it's serialization
activate AR
AR --> AS : **true**
deactivate AR

AS --> ACW : **actuator**
deactivate AS
ACW -> AM : domainToDTO(actuator)
activate AM
AM --> ACW : **actuatorDTO**
deactivate AM
ACW --> R : **actuatorDTO, HttpStatus.CREATED**
deactivate ACW
[o<-- R : **actuatorJSON, HttpStatus.CREATED**
deactivate R
@enduml

@enduml